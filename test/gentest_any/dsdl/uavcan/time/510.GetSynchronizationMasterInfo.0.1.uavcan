#
# Every node that acts as a time synchronization master, or is capable of acting as such,
# should support this service.
# Its objective is to provide information about which time system is currently used in the network.
#
# Once a time system is chosen, it cannot be changed as long as at least one node on the network is running.
# In other words, the time system cannot be changed while the network is operating.
# An implication of this is that if there are redundant time synchronization masters, they all must
# use the same time system always.
#

---

# Error variance, in second^2, of the time value reported by this master.
# This value is allowed to change freely while the master is running.
# For example, if the master's own clock is synchronized with a GNSS, the error variance is expected to increase
# as signal reception deteriorates. If the signal is lost, this value is expected to grow steadily, the rate of
# growth would be dependent on the quality of the time keeping hardware available locally (bad hardware yields
# faster growth). Once the signal is regained, this value would drop back to nominal.
float32 error_variance      # [second^2]

# Time system currently in use by the master.
# Cannot be changed while the network is operating.
TimeSystem.0.1 time_system

# The fixed difference, in seconds, between TAI and GPS time. Does not change ever.
uint12 TIME_DIFFERENCE_TAI_MINUS_GPS = 19    # [second]

# The current difference between TAI and UTC (a.k.a. leap seconds), if known.
# If unknown, set to zero. This value can change states between known and unknown while the master is running,
# depending on its ability to obtain robust values from external sources.
# This value can change twice a year, possibly while the system is running; https://en.wikipedia.org/wiki/Leap_second
# Since Earth is decelerating, this value can be only positive. Do not use outside Earth.
uint12 TIME_DIFFERENCE_TAI_MINUS_UTC_UNKNOWN = 0
uint12 time_difference_tai_minus_utc

# Reserved for future use
void8

@assert _offset_ % 8 == {0}
@assert _offset_.max <= 56   # It is nice to have the response fit into one transport frame, although not required.
